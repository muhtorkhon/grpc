// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/greeter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EducationService_AddStudent_FullMethodName     = "/erp.EducationService/AddStudent"
	EducationService_ListCourses_FullMethodName    = "/erp.EducationService/ListCourses"
	EducationService_SubmitPayments_FullMethodName = "/erp.EducationService/SubmitPayments"
	EducationService_Chat_FullMethodName           = "/erp.EducationService/Chat"
)

// EducationServiceClient is the client API for EducationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EducationServiceClient interface {
	// 1. Unary RPC: Yangi o‘quvchi qo‘shish
	AddStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error)
	// 2. Server Streaming RPC: Kurslar ro‘yxatini olish
	ListCourses(ctx context.Context, in *CoursesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CourseResponse], error)
	// 3. Client Streaming RPC: To‘lovlarni yuborish
	SubmitPayments(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PaymentRequest, PaymentResponse], error)
	// 4. Bidirectional Streaming RPC: Chat xizmati
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
}

type educationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEducationServiceClient(cc grpc.ClientConnInterface) EducationServiceClient {
	return &educationServiceClient{cc}
}

func (c *educationServiceClient) AddStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, EducationService_AddStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *educationServiceClient) ListCourses(ctx context.Context, in *CoursesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CourseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EducationService_ServiceDesc.Streams[0], EducationService_ListCourses_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CoursesRequest, CourseResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_ListCoursesClient = grpc.ServerStreamingClient[CourseResponse]

func (c *educationServiceClient) SubmitPayments(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PaymentRequest, PaymentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EducationService_ServiceDesc.Streams[1], EducationService_SubmitPayments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PaymentRequest, PaymentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_SubmitPaymentsClient = grpc.ClientStreamingClient[PaymentRequest, PaymentResponse]

func (c *educationServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EducationService_ServiceDesc.Streams[2], EducationService_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

// EducationServiceServer is the server API for EducationService service.
// All implementations must embed UnimplementedEducationServiceServer
// for forward compatibility.
type EducationServiceServer interface {
	// 1. Unary RPC: Yangi o‘quvchi qo‘shish
	AddStudent(context.Context, *StudentRequest) (*StudentResponse, error)
	// 2. Server Streaming RPC: Kurslar ro‘yxatini olish
	ListCourses(*CoursesRequest, grpc.ServerStreamingServer[CourseResponse]) error
	// 3. Client Streaming RPC: To‘lovlarni yuborish
	SubmitPayments(grpc.ClientStreamingServer[PaymentRequest, PaymentResponse]) error
	// 4. Bidirectional Streaming RPC: Chat xizmati
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	mustEmbedUnimplementedEducationServiceServer()
}

// UnimplementedEducationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEducationServiceServer struct{}

func (UnimplementedEducationServiceServer) AddStudent(context.Context, *StudentRequest) (*StudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedEducationServiceServer) ListCourses(*CoursesRequest, grpc.ServerStreamingServer[CourseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListCourses not implemented")
}
func (UnimplementedEducationServiceServer) SubmitPayments(grpc.ClientStreamingServer[PaymentRequest, PaymentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubmitPayments not implemented")
}
func (UnimplementedEducationServiceServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedEducationServiceServer) mustEmbedUnimplementedEducationServiceServer() {}
func (UnimplementedEducationServiceServer) testEmbeddedByValue()                          {}

// UnsafeEducationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EducationServiceServer will
// result in compilation errors.
type UnsafeEducationServiceServer interface {
	mustEmbedUnimplementedEducationServiceServer()
}

func RegisterEducationServiceServer(s grpc.ServiceRegistrar, srv EducationServiceServer) {
	// If the following call pancis, it indicates UnimplementedEducationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EducationService_ServiceDesc, srv)
}

func _EducationService_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EducationServiceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EducationService_AddStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EducationServiceServer).AddStudent(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EducationService_ListCourses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoursesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EducationServiceServer).ListCourses(m, &grpc.GenericServerStream[CoursesRequest, CourseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_ListCoursesServer = grpc.ServerStreamingServer[CourseResponse]

func _EducationService_SubmitPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EducationServiceServer).SubmitPayments(&grpc.GenericServerStream[PaymentRequest, PaymentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_SubmitPaymentsServer = grpc.ClientStreamingServer[PaymentRequest, PaymentResponse]

func _EducationService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EducationServiceServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EducationService_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

// EducationService_ServiceDesc is the grpc.ServiceDesc for EducationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EducationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "erp.EducationService",
	HandlerType: (*EducationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStudent",
			Handler:    _EducationService_AddStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCourses",
			Handler:       _EducationService_ListCourses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubmitPayments",
			Handler:       _EducationService_SubmitPayments_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _EducationService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greeter.proto",
}
